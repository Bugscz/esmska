/*
 * Main.java
 *
 * Created on 6. ƒçervenec 2007, 15:37
 */

package esmska;

import java.awt.Color;
import java.awt.Component;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.AbstractListModel;
import javax.swing.Action;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.ImageIcon;
import javax.swing.InputVerifier;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JTextField;
import javax.swing.ListCellRenderer;
import javax.swing.Timer;
import javax.swing.UIManager;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentEvent.ElementChange;
import javax.swing.event.DocumentEvent.EventType;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.text.AbstractDocument;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.DocumentFilter;
import javax.swing.text.Element;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledDocument;
import operators.Operator;
import operators.OperatorEnum;

/**
 *
 * @author  ripper
 */
public class Main extends javax.swing.JFrame {
    
    private Action quitAction = new QuitAction();
    private Action sendAction = new SendAction();
    private Action smsQueuePauseAction = new SMSQueuePauseAction();
    private Action deleteSMSAction = new DeleteSMSAction();
    private Action editSMSAction = new EditSMSAction();
    private Action aboutAction = new AboutAction();
    private JFrame aboutFrame;
    
    /** actual queue of sms's */
    private ArrayList<SMS> smsQueue = new ArrayList<SMS>();
    private SMSSender smsSender = new SMSSender(smsQueue, this);
    private Timer smsDelayTimer = new Timer(1000,new SMSDelayActionListener());
    
    private SMSTextPaneListener smsTextPaneListener = new SMSTextPaneListener();
    
    /** Creates new form Main */
    public Main() {
        initComponents();
        
        deleteSMSAction.setEnabled(false);
        editSMSAction.setEnabled(false);
        smsDelayProgressBar.setVisible(false);
        smsDelayTimer.setInitialDelay(0);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        mainPanel = new javax.swing.JPanel();
        smsPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        smsNumberTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        smsTextPane = new javax.swing.JTextPane();
        jLabel5 = new javax.swing.JLabel();
        operatorComboBox = new javax.swing.JComboBox();
        sendButton = new javax.swing.JButton();
        smsCounterLabel = new javax.swing.JLabel();
        statusPanel = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        smsDelayProgressBar = new javax.swing.JProgressBar();
        senderPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        senderNumberTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        senderNameTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        queuePanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        smsQueueList = new javax.swing.JList();
        pauseButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        programMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Esmska");
        setIconImage(new ImageIcon(getClass().getResource("resources/esmska.png")).getImage());
        smsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Zpr\u00e1va"));
        jLabel4.setText("\u010c\u00edslo");

        jLabel1.setText("+420");

        smsNumberTextField.setColumns(9);
        smsNumberTextField.setInputVerifier(new InputVerifier() {
            public boolean verify(JComponent input) {
                JTextField tf = (JTextField) input;
                if (tf.getText().length() != 9
                    && tf.getText().length() != 0)
                return false;
                for (Character c : tf.getText().toCharArray()) {
                    if (!Character.isDigit(c))
                    return false;
                }
                return true;
            }
        });
        smsNumberTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                smsNumberTextFieldKeyReleased(evt);
            }
        });

        smsTextPane.setBackground(SystemColor.text);
        smsTextPane.getDocument().addDocumentListener(smsTextPaneListener);
        jScrollPane1.setViewportView(smsTextPane);

        jLabel5.setText("Text");

        operatorComboBox.setModel(new DefaultComboBoxModel(OperatorEnum.getAsList().toArray()));
        operatorComboBox.addActionListener(new OperatorComboBoxActionListener());
        operatorComboBox.setSelectedItem(operatorComboBox.getSelectedItem());

        sendButton.setAction(sendAction);

        smsCounterLabel.setText("Naps\u00e1no 0 znak\u016f.");

        javax.swing.GroupLayout smsPanelLayout = new javax.swing.GroupLayout(smsPanel);
        smsPanel.setLayout(smsPanelLayout);
        smsPanelLayout.setHorizontalGroup(
            smsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(smsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(smsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(smsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, smsPanelLayout.createSequentialGroup()
                        .addComponent(smsCounterLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sendButton))
                    .addGroup(smsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(smsNumberTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(operatorComboBox, 0, 101, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE))
                .addContainerGap())
        );
        smsPanelLayout.setVerticalGroup(
            smsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(smsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(smsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel1)
                    .addComponent(smsNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(operatorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(smsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(smsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sendButton)
                    .addComponent(smsCounterLabel))
                .addContainerGap())
        );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(smsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(smsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        statusMessageLabel.setText("V\u00edtejte");

        statusAnimationLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/esmska/resources/task-idle.png")));

        smsDelayProgressBar.setMaximum(15);
        smsDelayProgressBar.setString("Dal\u0161\u00ed sms za: ");
        smsDelayProgressBar.setStringPainted(true);

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 536, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 320, Short.MAX_VALUE)
                .addComponent(smsDelayProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusAnimationLabel))
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(statusMessageLabel)
                        .addComponent(statusAnimationLabel))
                    .addComponent(smsDelayProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        senderPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Odesilatel"));
        jLabel2.setText("+420");

        senderNumberTextField.setColumns(9);
        senderNumberTextField.setInputVerifier(smsNumberTextField.getInputVerifier());

        jLabel3.setText("Jm\u00e9no");

        jLabel6.setText("\u010c\u00edslo");

        javax.swing.GroupLayout senderPanelLayout = new javax.swing.GroupLayout(senderPanel);
        senderPanel.setLayout(senderPanelLayout);
        senderPanelLayout.setHorizontalGroup(
            senderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(senderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(senderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(senderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(senderPanelLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(senderNumberTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addComponent(senderNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE))
                .addContainerGap())
        );
        senderPanelLayout.setVerticalGroup(
            senderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(senderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(senderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel2)
                    .addComponent(senderNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(senderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(senderNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        queuePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Fronta"));
        smsQueueList.setModel(new SMSQueueListModel());
        smsQueueList.setCellRenderer(new SMSQueueListRenderer());
        smsQueueList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                smsQueueListValueChanged(evt);
            }
        });

        jScrollPane2.setViewportView(smsQueueList);

        pauseButton.setAction(smsQueuePauseAction);

        editButton.setAction(editSMSAction);

        deleteButton.setAction(deleteSMSAction);

        javax.swing.GroupLayout queuePanelLayout = new javax.swing.GroupLayout(queuePanel);
        queuePanel.setLayout(queuePanelLayout);
        queuePanelLayout.setHorizontalGroup(
            queuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, queuePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(queuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pauseButton)
                    .addComponent(editButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        queuePanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {deleteButton, editButton, pauseButton});

        queuePanelLayout.setVerticalGroup(
            queuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, queuePanelLayout.createSequentialGroup()
                .addGroup(queuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, queuePanelLayout.createSequentialGroup()
                        .addComponent(editButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                        .addComponent(pauseButton))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE))
                .addContainerGap())
        );

        queuePanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {deleteButton, editButton, pauseButton});

        programMenu.setText("Program");
        aboutMenuItem.setAction(aboutAction);
        aboutMenuItem.setText("O programu");
        programMenu.add(aboutMenuItem);

        exitMenuItem.setAction(quitAction);
        programMenu.add(exitMenuItem);

        menuBar.add(programMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(senderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(queuePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(queuePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(8, 8, 8)
                        .addComponent(senderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void smsQueueListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_smsQueueListValueChanged
        if (!evt.getValueIsAdjusting()) {
            deleteSMSAction.setEnabled(smsQueueList.getModel().getSize() != 0
                    && smsQueueList.getSelectedIndices().length != 0);
            editSMSAction.setEnabled(smsQueueList.getModel().getSize() != 0
                    && smsQueueList.getSelectedIndices().length == 1);
        }
    }//GEN-LAST:event_smsQueueListValueChanged
    
    private void smsNumberTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_smsNumberTextFieldKeyReleased
        boolean ok = smsNumberTextField.getInputVerifier().verify(smsNumberTextField);
        if (!ok || smsNumberTextField.getText().isEmpty())
            smsNumberTextField.setBackground(Color.RED);
        else
            smsNumberTextField.setBackground(Color.GREEN);
    }//GEN-LAST:event_smsNumberTextFieldKeyReleased
    
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        //set native L&F
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception ex) {
            Logger.getLogger("global").log(Level.SEVERE, "Error setting L&F", ex);
        }
        
        //start main frame
        java.awt.EventQueue.invokeLater(new java.lang.Runnable() {
            public void run() {
                new esmska.Main().setVisible(true);
            }
        });
    }
    
    public void printStatusMessage(String message) {
        statusMessageLabel.setText(message);
    }
    
    public void setTaskRunning(boolean b) {
        if (b == false)
            statusAnimationLabel.setIcon(new ImageIcon(getClass().getResource("resources/task-idle.png")));
        else
            statusAnimationLabel.setIcon(new ImageIcon(getClass().getResource("resources/task-busy.gif")));
    }
    
    public void smsQueueChanged() {
        ((SMSQueueListModel)smsQueueList.getModel()).fireContentsChanged(
                smsQueueList.getModel(), 0, smsQueue.size());
        smsQueueListValueChanged(new ListSelectionEvent(
                smsQueueList,0,smsQueueList.getModel().getSize(),false));
    }
    
    public void pauseSMSQueue() {
        smsQueuePauseAction.actionPerformed(null);
    }
    
    public void setSMSDelay() {
        smsSender.setDelayed(true);
        smsDelayTimer.start();
    }
    
    /** show about frame */
    private class AboutAction extends AbstractAction {
        public AboutAction() {
            super("O programu", new ImageIcon(Main.this.getClass().getResource("resources/about-small.png")));
        }
        public void actionPerformed(ActionEvent e) {
            if (aboutFrame == null)
                aboutFrame = new AboutFrame();
            aboutFrame.setLocationRelativeTo(Main.this);
            aboutFrame.setVisible(true);
        }
    }
    
    /** Action to send sms to queue */
    private class SendAction extends AbstractAction {
        public SendAction() {
            super("Poslat", new ImageIcon(Main.this.getClass().getResource("resources/send.png")));
        }
        public void actionPerformed(ActionEvent e) {
            if (smsNumberTextField.getText().isEmpty()) {
                smsNumberTextField.requestFocusInWindow();
                return;
            }
            SMS sms = new SMS();
            sms.setNumber(smsNumberTextField.getText());
            sms.setText(smsTextPane.getText());
            sms.setOperator((Operator)operatorComboBox.getSelectedItem());
            sms.setSenderNumber(senderNumberTextField.getText());
            sms.setSenderName(senderNameTextField.getText());
            
            smsQueue.add(sms);
            smsQueueChanged();
            smsSender.announceNewSMS();
            
            smsTextPane.setText(null);
        }
    }
    
    /** pause/unpause the sms queue */
    private class SMSQueuePauseAction extends AbstractAction {
        private boolean makePause = true;
        public SMSQueuePauseAction() {
            super("Zastavit", new ImageIcon(Main.this.getClass().getResource("resources/pause.png")));
        }
        public void actionPerformed(ActionEvent e) {
            if (makePause) {
                smsSender.setPaused(true);
                this.putValue(AbstractAction.NAME,"Pokraƒçovat");
                this.putValue(AbstractAction.LARGE_ICON_KEY, new ImageIcon(Main.this.getClass().getResource("resources/start.png")));
            } else {
                smsSender.setPaused(false);
                this.putValue(AbstractAction.NAME,"Zastavit");
                this.putValue(AbstractAction.LARGE_ICON_KEY,new ImageIcon(Main.this.getClass().getResource("resources/pause.png")));
            }
            makePause = !makePause;
        }
    }
    
    /** erase sms from queue list */
    private class DeleteSMSAction extends AbstractAction {
        public DeleteSMSAction() {
            super("Smazat", new ImageIcon(Main.this.getClass().getResource("resources/delete.png")));
        }
        public void actionPerformed(ActionEvent e) {
            Object[] smsArray = smsQueueList.getSelectedValues();
            for (Object o : smsArray) {
                SMS sms = (SMS) o;
                smsQueue.remove(sms);
            }
            smsQueueChanged();
        }
    }
    
    /** action to quit the program */
    private class QuitAction extends AbstractAction {
        public QuitAction() {
            super("Ukonƒçit", new ImageIcon(Main.this.getClass().getResource("resources/exit-small.png")));
        }
        public void actionPerformed(ActionEvent e) {
            System.exit(0);
        }
    }
    
    /** edit sms from queue */
    private class EditSMSAction extends AbstractAction {
        public EditSMSAction() {
            super("Upravit", new ImageIcon(Main.this.getClass().getResource("resources/edit.png")));
        }
        public void actionPerformed(ActionEvent e) {
            SMS sms = (SMS) smsQueueList.getSelectedValue();
            if (sms == null)
                return;
            smsNumberTextField.setText(sms.getNumber());
            smsTextPane.setText(sms.getText());
            operatorComboBox.setSelectedItem(sms.getOperator());
            senderNameTextField.setText(sms.getSenderName());
            senderNumberTextField.setText(sms.getSenderNumber());
            smsQueue.remove(sms);
            smsQueueChanged();
        }
    }
    
    /** Model for SMSQueueList */
    private class SMSQueueListModel extends AbstractListModel {
        public Object getElementAt(int index) {
            return smsQueue.get(index);
        }
        public int getSize() {
            return smsQueue.size();
        }
        
        protected void fireIntervalRemoved(Object source, int index0, int index1) {
            super.fireIntervalRemoved(source, index0, index1);
        }
        
        protected void fireIntervalAdded(Object source, int index0, int index1) {
            super.fireIntervalAdded(source, index0, index1);
        }
        
        protected void fireContentsChanged(Object source, int index0, int index1) {
            super.fireContentsChanged(source, index0, index1);
        }
    }
    
    /** progress bar action listener after sending sms */
    private class SMSDelayActionListener implements ActionListener {
        private final int DELAY = 15;
        private int seconds = 0;
        public void actionPerformed(ActionEvent e) {
            if (seconds <= DELAY) {
                smsDelayProgressBar.setValue(seconds);
                smsDelayProgressBar.setString("Dal≈°√≠ sms za: " + (DELAY-seconds) + "s");
                if (seconds == 0)
                    smsDelayProgressBar.setVisible(true);
                seconds++;
            } else {
                smsDelayTimer.stop();
                smsDelayProgressBar.setVisible(false);
                seconds = 0;
                smsSender.setDelayed(false);
                smsSender.announceNewSMS();
            }
        }
    }
    
    /** renderer for items in queue list */
    private class SMSQueueListRenderer implements ListCellRenderer {
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            Component c = (new DefaultListCellRenderer()).getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
            if ((((SMS)value).getStatus() == SMS.Status.PROBLEMATIC) && !isSelected) {
                c.setBackground(Color.RED);
            }
            return c;
        }
    }
    
    /** listener counting number of chars in sms */
    private class SMSTextPaneListener implements DocumentListener {
        private void countChars(DocumentEvent e) {
            int chars = e.getDocument().getLength();
            Operator op = (Operator)operatorComboBox.getSelectedItem();
            smsCounterLabel.setText("Naps√°no " +  chars
                    + " znak≈Ø (" + op.getSMSCount(chars) + " sms).");
            if (chars > op.getMaxChars()) {
                smsCounterLabel.setForeground(Color.RED);
                smsCounterLabel.setText("Naps√°no " +  chars
                        + " znak≈Ø (nelze odeslat!).");
            } else
                smsCounterLabel.setForeground(SystemColor.textText);
        }
        public void changedUpdate(DocumentEvent e) {
            countChars(e);
        }
        public void insertUpdate(DocumentEvent e) {
            countChars(e);
        }
        public void removeUpdate(DocumentEvent e) {
            countChars(e);
        }
    }
    
    /** another operator selected */
    private class OperatorComboBoxActionListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            DocumentEvent event = new DocumentEvent() {
                public ElementChange getChange(Element elem) {
                    return null;
                }
                public Document getDocument() {
                    return smsTextPane.getDocument();
                }
                public int getLength() {
                    return 0;
                }
                public int getOffset() {
                    return 0;
                }
                public EventType getType() {
                    return EventType.INSERT;
                }
            };
            smsTextPaneListener.insertUpdate(event);
            
            //set size and color filter
            ((AbstractDocument)smsTextPane.getStyledDocument()).setDocumentFilter(
                    new SMSTextPaneDocumentFilter(((Operator)operatorComboBox.getSelectedItem()).getMaxChars(),
                    ((Operator)operatorComboBox.getSelectedItem()).getSMSLength()));
        }
    }
    
    /** limits maximum sms length and colors it */
    private class SMSTextPaneDocumentFilter extends DocumentFilter {
        private int maxChars;
        private int smsLength;
        StyledDocument doc;
        Style regular, highlight;
        Timer timer = new Timer(500, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                colorDocument(0,doc.getLength());
            }
        });
        public SMSTextPaneDocumentFilter(int maxChars, int smsLength) {
            super();
            this.maxChars = maxChars;
            this.smsLength = smsLength;
            timer.setRepeats(false);
            doc = smsTextPane.getStyledDocument();
            Style def = StyleContext.getDefaultStyleContext().getStyle(StyleContext.DEFAULT_STYLE);
            regular = doc.addStyle("regular", def);
            StyleConstants.setForeground(regular,SystemColor.textText);
            highlight = doc.addStyle("highlight", def);
            StyleConstants.setForeground(highlight, Color.BLUE);
        }
        private void colorDocument(int from, int length) {
            while (from < length) {
                int to = ((from / smsLength) + 1) * smsLength - 1;
                to = to<length-1?to:length-1;
                doc.setCharacterAttributes(from,to-from+1,getStyle(from),false);
                from = to + 1;
            }
        }
        private Style getStyle(int offset) {
            if ((offset / smsLength) % 2 == 0)
                return regular;
            else
                return highlight;
        }
        public void replace(DocumentFilter.FilterBypass fb, int offset, int length, String text, AttributeSet attrs) throws BadLocationException {
            if ((fb.getDocument().getLength() + text.length() - length) > maxChars)
                return;
            super.replace(fb, offset, length, text, getStyle(offset));
            if (offset + (text!=null?text.length():0) != fb.getDocument().getLength())
                timer.restart();
        }
        public void insertString(DocumentFilter.FilterBypass fb, int offset, String string, AttributeSet attr) throws BadLocationException {
            if ((fb.getDocument().getLength() + string.length()) > maxChars)
                return;
            super.insertString(fb, offset, string, attr);
            timer.restart();
        }
        public void remove(DocumentFilter.FilterBypass fb, int offset, int length) throws BadLocationException {
            super.remove(fb, offset, length);
            if (offset != fb.getDocument().getLength())
                timer.restart();
        }
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton editButton;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JComboBox operatorComboBox;
    private javax.swing.JButton pauseButton;
    private javax.swing.JMenu programMenu;
    private javax.swing.JPanel queuePanel;
    private javax.swing.JButton sendButton;
    private javax.swing.JTextField senderNameTextField;
    private javax.swing.JTextField senderNumberTextField;
    private javax.swing.JPanel senderPanel;
    private javax.swing.JLabel smsCounterLabel;
    private javax.swing.JProgressBar smsDelayProgressBar;
    private javax.swing.JTextField smsNumberTextField;
    private javax.swing.JPanel smsPanel;
    private javax.swing.JList smsQueueList;
    private javax.swing.JTextPane smsTextPane;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables
}
