/*
 * HistoryFrame.java
 *
 * Created on 27. prosinec 2007, 12:22
 */
package esmska.gui;

import esmska.data.History;
import esmska.persistence.PersistenceManager;
import esmska.utils.ActionEventSupport;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import org.jvnet.substance.SubstanceLookAndFeel;

/**
 *
 * @author  ripper
 */
public class HistoryFrame extends javax.swing.JFrame {

    public static final int ACTION_RESEND_SMS = 0;
    private ActionEventSupport actionEventSupport;
    private static final String RES = "/esmska/resources/";
    private static final Logger logger = Logger.getLogger(HistoryFrame.class.getName());
    DateFormat df = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM);
    private List<History> history = PersistenceManager.getHistory();
    private HistoryTableModel historyTableModel = new HistoryTableModel();
    private Action deleteAction = new DeleteAction();
    private Action resendAction = new ResendAction();
    private History selectedHistory;

    /** Creates new form HistoryFrame */
    public HistoryFrame() {
        initComponents();
        actionEventSupport = new ActionEventSupport(this);

        //select first row
        if (historyTableModel.getRowCount() > 0) {
            historyTable.getSelectionModel().setSelectionInterval(0, 0);
        }
    }

    /** Return currently selected sms history */
    public History getSelectedHistory() {
        return selectedHistory;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        historyTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        dateLabel = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        numberLabel = new javax.swing.JLabel();
        operatorLabel = new javax.swing.JLabel();
        senderNumberLabel = new javax.swing.JLabel();
        senderNameLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        deleteButton = new javax.swing.JButton();
        resendButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Historie odeslaných zpráv");
        setIconImage(new ImageIcon(getClass().getResource(RES + "history-48.png")).getImage());

        historyTable.setAutoCreateRowSorter(true);
        historyTable.setModel(historyTableModel);
        historyTable.setDefaultRenderer(Date.class, new TableDateRenderer());

        List<RowSorter.SortKey> sortKeys = new ArrayList<RowSorter.SortKey>();
        sortKeys.add(new RowSorter.SortKey(0, SortOrder.DESCENDING));
        historyTable.getRowSorter().setSortKeys(sortKeys);

        historyTable.getSelectionModel().addListSelectionListener(new HistoryTableListener());
        historyTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                historyTableMouseClicked(evt);
            }
        });
        historyTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                historyTableKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(historyTable);

        jLabel2.setText("Jméno:");

        jLabel1.setText("Číslo:");

        jLabel3.setText("Datum:");

        jLabel4.setText("Operátor:");

        jLabel5.setText("Číslo odes.:");

        jLabel6.setText("Jméno odes.:");

        dateLabel.setText("    ");

        nameLabel.setForeground(new java.awt.Color(0, 51, 255));
        nameLabel.setText("    ");

        numberLabel.setText("    ");

        operatorLabel.setText("    ");

        senderNumberLabel.setText("    ");

        senderNameLabel.setText("    ");

        textArea.setLineWrap(true);
        jScrollPane2.setViewportView(textArea);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(operatorLabel))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dateLabel))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nameLabel))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(numberLabel))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(senderNumberLabel))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(senderNameLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel1, jLabel2, jLabel3, jLabel4, jLabel5, jLabel6});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {dateLabel, nameLabel, numberLabel, operatorLabel, senderNameLabel, senderNumberLabel});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(dateLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(nameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(numberLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(operatorLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(senderNumberLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(senderNameLabel)))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
        );

        deleteButton.setAction(deleteAction);
        deleteButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
        deleteButton.putClientProperty(SubstanceLookAndFeel.FLAT_PROPERTY, Boolean.TRUE);

        resendButton.setAction(resendAction);
        resendButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
        resendButton.putClientProperty(SubstanceLookAndFeel.FLAT_PROPERTY, Boolean.TRUE);

        closeButton.setMnemonic('z');
        closeButton.setText("Zavřít");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 553, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(resendButton)
                    .addComponent(closeButton)
                    .addComponent(deleteButton))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {deleteButton, resendButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE)
                    .addComponent(deleteButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(resendButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(closeButton))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {deleteButton, resendButton});

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        this.setVisible(false);
        this.dispose();
}//GEN-LAST:event_closeButtonActionPerformed

    private void historyTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_historyTableMouseClicked
        if (evt.getClickCount() != 2) { //only on double click
            return;
        }
        resendAction.actionPerformed(null);
    }//GEN-LAST:event_historyTableMouseClicked

    private void historyTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_historyTableKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            evt.consume();
            resendAction.actionPerformed(null);
        }
    }//GEN-LAST:event_historyTableKeyPressed

    /** Delete sms from history */
    private class DeleteAction extends AbstractAction {

        public DeleteAction() {
            super(null, new ImageIcon(HistoryFrame.class.getResource(RES + "delete.png")));
            this.putValue(SHORT_DESCRIPTION, "Odstranit označené zprávy z historie (Alt+D)");
            putValue(MNEMONIC_KEY, KeyEvent.VK_D);
            this.setEnabled(false);
        }

        public void actionPerformed(ActionEvent e) {
            int[] rows = historyTable.getSelectedRows();
            if (rows.length <= 0) {
                return;
            }
            int result = JOptionPane.showConfirmDialog(HistoryFrame.this,
                    "Opravdu z historie odstranit " +
                    "všechny označené zprávy?", "Opravdu smazat?",
                    JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if (result != JOptionPane.YES_OPTION) {
                return;
            }
            //confirmed, let's delete it
            ArrayList<History> histToDelete = new ArrayList<History>();
            for (int i : rows) {
                i = historyTable.getRowSorter().convertRowIndexToModel(i);
                histToDelete.add(history.get(i));
            }
            history.removeAll(histToDelete);
            //refresh table
            historyTableModel.fireTableDataChanged();
            historyTable.getSelectionModel().clearSelection();
        }
    }

    /** Resend chosen sms from history */
    private class ResendAction extends AbstractAction {

        public ResendAction() {
            super(null, new ImageIcon(HistoryFrame.class.getResource(RES + "send.png")));
            this.putValue(SHORT_DESCRIPTION, "Přeposlat zprávu někomu jinému (Alt+S)");
            putValue(MNEMONIC_KEY, KeyEvent.VK_S);
            this.setEnabled(false);
        }

        public void actionPerformed(ActionEvent e) {
            if (selectedHistory == null) {
                return;
            }
            //fire event and close
            actionEventSupport.fireActionPerformed(ACTION_RESEND_SMS, null);
            closeButtonActionPerformed(null);
        }
    }

    /** Table model for showing sms history */
    private class HistoryTableModel extends AbstractTableModel {

        public int getRowCount() {
            return history.size();
        }

        public int getColumnCount() {
            return 3;
        }

        public Object getValueAt(int rowIndex, int columnIndex) {
            History hist = history.get(rowIndex);
            switch (columnIndex) {
                case 0:
                    return hist.getDate();
                case 1:
                    String name = hist.getName();
                    return name != null && !name.equals("") ? name : hist.getNumber();
                case 2:
                    return hist.getText().replaceAll("\n+", " "); //show spaces instead of linebreaks
                default:
                    logger.warning("Index out of bounds!");
                    return null;
            }
        }

        @Override
        public String getColumnName(int column) {
            switch (column) {
                case 0:
                    return "Datum";
                case 1:
                    return "Příjemce";
                case 2:
                    return "Text";
                default:
                    logger.warning("Index out of bounds!");
                    return null;
            }
        }

        @Override
        public Class<?> getColumnClass(int columnIndex) {
            switch (columnIndex) {
                case 0:
                    return Date.class;
                case 1:
                case 2:
                    return String.class;
                default:
                    logger.warning("Index out of bounds!");
                    return Object.class;
            }
        }

        @Override
        public void fireTableDataChanged() {
            super.fireTableDataChanged();
        }

        @Override
        public void fireTableRowsDeleted(int firstRow, int lastRow) {
            super.fireTableRowsDeleted(firstRow, lastRow);
        }

        @Override
        public void fireTableRowsInserted(int firstRow, int lastRow) {
            super.fireTableRowsInserted(firstRow, lastRow);
        }
    }

    /** Listener for changes in history table */
    private class HistoryTableListener implements ListSelectionListener {

        public void valueChanged(ListSelectionEvent e) {
            if (e.getValueIsAdjusting()) {
                return;
            }
            int index = historyTable.getSelectedRow();
            boolean selected = (index >= 0);
            deleteAction.setEnabled(selected);
            resendAction.setEnabled(selected);
            if (!selected) {
                return;
            }
            index = historyTable.getRowSorter().convertRowIndexToModel(index);

            History hist = history.get(index);
            dateLabel.setText(df.format(hist.getDate()));
            nameLabel.setText(hist.getName());
            numberLabel.setText(hist.getNumber());
            operatorLabel.setText(hist.getOperator());
            senderNameLabel.setText(hist.getSenderName());
            senderNumberLabel.setText(hist.getSenderNumber());
            textArea.setText(hist.getText());
            textArea.setCaretPosition(0);

            selectedHistory = hist;
        }
    }

    /** Renderer for date columns in history table */
    private class TableDateRenderer extends DefaultTableCellRenderer {

        private final ImageIcon icon = new ImageIcon(HistoryFrame.class.getResource(RES + "message-16.png"));

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            Component comp = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            JLabel label = (JLabel) comp;
            label.setText(df.format(value));
            label.setIcon(icon);
            return label;
        }
    }

    public void addActionListener(ActionListener actionListener) {
        actionEventSupport.addActionListener(actionListener);
    }

    public void removeActionListener(ActionListener actionListener) {
        actionEventSupport.removeActionListener(actionListener);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTable historyTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JLabel numberLabel;
    private javax.swing.JLabel operatorLabel;
    private javax.swing.JButton resendButton;
    private javax.swing.JLabel senderNameLabel;
    private javax.swing.JLabel senderNumberLabel;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
}
