
/*
 * GatewayMessage.java
 *
 * Created on 8.1.2011, 16:01:32
 */

package esmska.gui;

import esmska.data.CountryPrefix;
import esmska.data.Icons;
import esmska.data.SMS;
import esmska.data.event.ActionEventSupport;
import esmska.utils.L10N;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.text.MessageFormat;
import java.util.ResourceBundle;
import javax.swing.AbstractAction;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.KeyStroke;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.SwingConstants;
import org.apache.commons.lang.StringUtils;
import org.jdesktop.swingx.JXTaskPane;
import org.openide.awt.Mnemonics;

/** Message from gateway displayed to a user
 *
 * @author ripper
 */
public class GatewayMessage extends JPanel {
    /** Signal to close this message */
    public static final int CLOSE_ME = 0;

    private static final ResourceBundle l10n = L10N.l10nBundle;
    // <editor-fold defaultstate="collapsed" desc="ActionEvent support">
    private ActionEventSupport actionSupport = new ActionEventSupport(this);
    public void addActionListener(ActionListener actionListener) {
        actionSupport.addActionListener(actionListener);
    }
    public void removeActionListener(ActionListener actionListener) {
        actionSupport.removeActionListener(actionListener);
    }
    // </editor-fold>

    /** Creates new form GatewayMessage */
    public GatewayMessage() {
        initComponents();
    }

    /** Initialize this message to show an SMS error
     * @param sms sms that failed
     */
    public TaskPane showErrorMsg(SMS sms) {
        String number = CountryPrefix.stripCountryPrefix(sms.getNumber(), true);
        String recipient = null;
        if (StringUtils.isNotEmpty(sms.getName())) {
            recipient = MessageFormat.format("{0} ({1}, {2})", sms.getName(),
                    number, sms.getGateway());
        } else {
            recipient = MessageFormat.format("{0} ({1})", number, sms.getGateway());
        }
        String cause = (sms.getErrMsg() != null ? sms.getErrMsg().trim() : "");
        String title = MessageFormat.format(l10n.getString("GatewayMessage.smsFailed"), recipient);
        Icon icon = Icons.STATUS_WARNING;

        msgLabel.setText("<html>" + cause + "</html>");
        return wrapAsTaskPane(this, title, icon);
    }

    /** Focus the best component in this panel */
    public void setBestFocus() {
        okButton.requestFocusInWindow();
    }

    /** Cancel this message, do what's most appropriate */
    public void cancel() {
        okButton.doClick(0);
    }

    /** Wrap this message as a TaskPane */
    private TaskPane wrapAsTaskPane(GatewayMessage gm, String title, Icon icon) {
        TaskPane pane = new TaskPane(gm);
        pane.setTitle(title);
        pane.setIcon(icon);
        pane.setScrollOnExpand(true);
        pane.setCollapsed(true);
        return pane;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        msgLabel = new JHtmlLabel();
        okButton = new JButton();
        Mnemonics.setLocalizedText(msgLabel, "<<Some text>>\t");
        msgLabel.setVerticalAlignment(SwingConstants.TOP);
        Mnemonics.setLocalizedText(okButton, l10n.getString("OK_"));
        okButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.TRAILING)
                    .addComponent(msgLabel, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(okButton))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(msgLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(okButton)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        actionSupport.fireActionPerformed(CLOSE_ME, null);
    }//GEN-LAST:event_okButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JHtmlLabel msgLabel;
    private JButton okButton;
    // End of variables declaration//GEN-END:variables

    /** A JXTaskPane override that allows easy interaction with included GatewayMessage */
    public static class TaskPane extends JXTaskPane {
        private GatewayMessage gm;

        /** Create new TaskPane containing GatewayMessage */
        public TaskPane(GatewayMessage gm) {
            this.gm = gm;
            add(gm);

            //cancel on Escape
            String command = "cancel";
            getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(
                    KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), command);
            getActionMap().put(command, new AbstractAction() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    getGatewayMessage().cancel();
                }
            });

            // workaround bug where collapsible state is not toggled by keyboard
            // (will be fixed in more recent release of swingx)
            // https://substance-swingx.dev.java.net/issues/show_bug.cgi?id=17
            command = "toggle-collapse";
            getInputMap(JComponent.WHEN_FOCUSED).put(
                    KeyStroke.getKeyStroke(KeyEvent.VK_SPACE, 0), command);
            getInputMap(JComponent.WHEN_FOCUSED).put(
                    KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), command);
            getActionMap().put(command, new AbstractAction() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    setCollapsed(!isCollapsed());
                }
            });

            // when this TaskPane is focus, scroll the scrollpane to have it visible
            addFocusListener(new FocusAdapter() {
                @Override
                public void focusGained(FocusEvent e) {
                    if (e.isTemporary()) {
                        return;
                    }
                    TaskPane.this.scrollRectToVisible(new Rectangle(
                            TaskPane.this.getX(), TaskPane.this.getY(), 1, 1));
                }
            });
        }

        /** Get the GatewayMessage included in this TaskPane */
        public GatewayMessage getGatewayMessage() {
            return gm;
        }
    }
}
